// flow-typed signature: de37175bed8bd1c2979965d6f7e493ac
// flow-typed version: <<STUB>>/@typescript-eslint/eslint-plugin_v^2.9.0/flow_v0.112.0

/**
 * This is an autogenerated libdef stub for:
 *
 *   '@typescript-eslint/eslint-plugin'
 *
 * Fill this stub out by replacing all the `any` types.
 *
 * Once filled out, we encourage you to share your work with the
 * community by sending a pull request to:
 * https://github.com/flowtype/flow-typed
 */

declare module '@typescript-eslint/eslint-plugin' {
  declare module.exports: any;
}

/**
 * We include stubs for each file inside this npm package in case you need to
 * require those files directly. Feel free to delete any files that aren't
 * needed.
 */
declare module '@typescript-eslint/eslint-plugin/dist/configs/eslint-recommended' {
  declare module.exports: any;
}

declare module '@typescript-eslint/eslint-plugin/dist' {
  declare module.exports: any;
}

declare module '@typescript-eslint/eslint-plugin/dist/rules/adjacent-overload-signatures' {
  declare module.exports: any;
}

declare module '@typescript-eslint/eslint-plugin/dist/rules/array-type' {
  declare module.exports: any;
}

declare module '@typescript-eslint/eslint-plugin/dist/rules/await-thenable' {
  declare module.exports: any;
}

declare module '@typescript-eslint/eslint-plugin/dist/rules/ban-ts-ignore' {
  declare module.exports: any;
}

declare module '@typescript-eslint/eslint-plugin/dist/rules/ban-types' {
  declare module.exports: any;
}

declare module '@typescript-eslint/eslint-plugin/dist/rules/brace-style' {
  declare module.exports: any;
}

declare module '@typescript-eslint/eslint-plugin/dist/rules/camelcase' {
  declare module.exports: any;
}

declare module '@typescript-eslint/eslint-plugin/dist/rules/class-name-casing' {
  declare module.exports: any;
}

declare module '@typescript-eslint/eslint-plugin/dist/rules/consistent-type-assertions' {
  declare module.exports: any;
}

declare module '@typescript-eslint/eslint-plugin/dist/rules/consistent-type-definitions' {
  declare module.exports: any;
}

declare module '@typescript-eslint/eslint-plugin/dist/rules/explicit-function-return-type' {
  declare module.exports: any;
}

declare module '@typescript-eslint/eslint-plugin/dist/rules/explicit-member-accessibility' {
  declare module.exports: any;
}

declare module '@typescript-eslint/eslint-plugin/dist/rules/func-call-spacing' {
  declare module.exports: any;
}

declare module '@typescript-eslint/eslint-plugin/dist/rules/generic-type-naming' {
  declare module.exports: any;
}

declare module '@typescript-eslint/eslint-plugin/dist/rules/indent-new-do-not-use/BinarySearchTree' {
  declare module.exports: any;
}

declare module '@typescript-eslint/eslint-plugin/dist/rules/indent-new-do-not-use' {
  declare module.exports: any;
}

declare module '@typescript-eslint/eslint-plugin/dist/rules/indent-new-do-not-use/OffsetStorage' {
  declare module.exports: any;
}

declare module '@typescript-eslint/eslint-plugin/dist/rules/indent-new-do-not-use/TokenInfo' {
  declare module.exports: any;
}

declare module '@typescript-eslint/eslint-plugin/dist/rules/indent' {
  declare module.exports: any;
}

declare module '@typescript-eslint/eslint-plugin/dist/rules' {
  declare module.exports: any;
}

declare module '@typescript-eslint/eslint-plugin/dist/rules/interface-name-prefix' {
  declare module.exports: any;
}

declare module '@typescript-eslint/eslint-plugin/dist/rules/member-delimiter-style' {
  declare module.exports: any;
}

declare module '@typescript-eslint/eslint-plugin/dist/rules/member-naming' {
  declare module.exports: any;
}

declare module '@typescript-eslint/eslint-plugin/dist/rules/member-ordering' {
  declare module.exports: any;
}

declare module '@typescript-eslint/eslint-plugin/dist/rules/no-array-constructor' {
  declare module.exports: any;
}

declare module '@typescript-eslint/eslint-plugin/dist/rules/no-dynamic-delete' {
  declare module.exports: any;
}

declare module '@typescript-eslint/eslint-plugin/dist/rules/no-empty-function' {
  declare module.exports: any;
}

declare module '@typescript-eslint/eslint-plugin/dist/rules/no-empty-interface' {
  declare module.exports: any;
}

declare module '@typescript-eslint/eslint-plugin/dist/rules/no-explicit-any' {
  declare module.exports: any;
}

declare module '@typescript-eslint/eslint-plugin/dist/rules/no-extra-non-null-assertion' {
  declare module.exports: any;
}

declare module '@typescript-eslint/eslint-plugin/dist/rules/no-extra-parens' {
  declare module.exports: any;
}

declare module '@typescript-eslint/eslint-plugin/dist/rules/no-extraneous-class' {
  declare module.exports: any;
}

declare module '@typescript-eslint/eslint-plugin/dist/rules/no-floating-promises' {
  declare module.exports: any;
}

declare module '@typescript-eslint/eslint-plugin/dist/rules/no-for-in-array' {
  declare module.exports: any;
}

declare module '@typescript-eslint/eslint-plugin/dist/rules/no-inferrable-types' {
  declare module.exports: any;
}

declare module '@typescript-eslint/eslint-plugin/dist/rules/no-magic-numbers' {
  declare module.exports: any;
}

declare module '@typescript-eslint/eslint-plugin/dist/rules/no-misused-new' {
  declare module.exports: any;
}

declare module '@typescript-eslint/eslint-plugin/dist/rules/no-misused-promises' {
  declare module.exports: any;
}

declare module '@typescript-eslint/eslint-plugin/dist/rules/no-namespace' {
  declare module.exports: any;
}

declare module '@typescript-eslint/eslint-plugin/dist/rules/no-non-null-assertion' {
  declare module.exports: any;
}

declare module '@typescript-eslint/eslint-plugin/dist/rules/no-parameter-properties' {
  declare module.exports: any;
}

declare module '@typescript-eslint/eslint-plugin/dist/rules/no-require-imports' {
  declare module.exports: any;
}

declare module '@typescript-eslint/eslint-plugin/dist/rules/no-this-alias' {
  declare module.exports: any;
}

declare module '@typescript-eslint/eslint-plugin/dist/rules/no-type-alias' {
  declare module.exports: any;
}

declare module '@typescript-eslint/eslint-plugin/dist/rules/no-unnecessary-condition' {
  declare module.exports: any;
}

declare module '@typescript-eslint/eslint-plugin/dist/rules/no-unnecessary-qualifier' {
  declare module.exports: any;
}

declare module '@typescript-eslint/eslint-plugin/dist/rules/no-unnecessary-type-arguments' {
  declare module.exports: any;
}

declare module '@typescript-eslint/eslint-plugin/dist/rules/no-unnecessary-type-assertion' {
  declare module.exports: any;
}

declare module '@typescript-eslint/eslint-plugin/dist/rules/no-untyped-public-signature' {
  declare module.exports: any;
}

declare module '@typescript-eslint/eslint-plugin/dist/rules/no-unused-expressions' {
  declare module.exports: any;
}

declare module '@typescript-eslint/eslint-plugin/dist/rules/no-unused-vars-experimental' {
  declare module.exports: any;
}

declare module '@typescript-eslint/eslint-plugin/dist/rules/no-unused-vars' {
  declare module.exports: any;
}

declare module '@typescript-eslint/eslint-plugin/dist/rules/no-use-before-define' {
  declare module.exports: any;
}

declare module '@typescript-eslint/eslint-plugin/dist/rules/no-useless-constructor' {
  declare module.exports: any;
}

declare module '@typescript-eslint/eslint-plugin/dist/rules/no-var-requires' {
  declare module.exports: any;
}

declare module '@typescript-eslint/eslint-plugin/dist/rules/prefer-for-of' {
  declare module.exports: any;
}

declare module '@typescript-eslint/eslint-plugin/dist/rules/prefer-function-type' {
  declare module.exports: any;
}

declare module '@typescript-eslint/eslint-plugin/dist/rules/prefer-includes' {
  declare module.exports: any;
}

declare module '@typescript-eslint/eslint-plugin/dist/rules/prefer-namespace-keyword' {
  declare module.exports: any;
}

declare module '@typescript-eslint/eslint-plugin/dist/rules/prefer-nullish-coalescing' {
  declare module.exports: any;
}

declare module '@typescript-eslint/eslint-plugin/dist/rules/prefer-optional-chain' {
  declare module.exports: any;
}

declare module '@typescript-eslint/eslint-plugin/dist/rules/prefer-readonly' {
  declare module.exports: any;
}

declare module '@typescript-eslint/eslint-plugin/dist/rules/prefer-regexp-exec' {
  declare module.exports: any;
}

declare module '@typescript-eslint/eslint-plugin/dist/rules/prefer-string-starts-ends-with' {
  declare module.exports: any;
}

declare module '@typescript-eslint/eslint-plugin/dist/rules/promise-function-async' {
  declare module.exports: any;
}

declare module '@typescript-eslint/eslint-plugin/dist/rules/quotes' {
  declare module.exports: any;
}

declare module '@typescript-eslint/eslint-plugin/dist/rules/require-array-sort-compare' {
  declare module.exports: any;
}

declare module '@typescript-eslint/eslint-plugin/dist/rules/require-await' {
  declare module.exports: any;
}

declare module '@typescript-eslint/eslint-plugin/dist/rules/restrict-plus-operands' {
  declare module.exports: any;
}

declare module '@typescript-eslint/eslint-plugin/dist/rules/restrict-template-expressions' {
  declare module.exports: any;
}

declare module '@typescript-eslint/eslint-plugin/dist/rules/return-await' {
  declare module.exports: any;
}

declare module '@typescript-eslint/eslint-plugin/dist/rules/semi' {
  declare module.exports: any;
}

declare module '@typescript-eslint/eslint-plugin/dist/rules/space-before-function-paren' {
  declare module.exports: any;
}

declare module '@typescript-eslint/eslint-plugin/dist/rules/strict-boolean-expressions' {
  declare module.exports: any;
}

declare module '@typescript-eslint/eslint-plugin/dist/rules/triple-slash-reference' {
  declare module.exports: any;
}

declare module '@typescript-eslint/eslint-plugin/dist/rules/type-annotation-spacing' {
  declare module.exports: any;
}

declare module '@typescript-eslint/eslint-plugin/dist/rules/typedef' {
  declare module.exports: any;
}

declare module '@typescript-eslint/eslint-plugin/dist/rules/unbound-method' {
  declare module.exports: any;
}

declare module '@typescript-eslint/eslint-plugin/dist/rules/unified-signatures' {
  declare module.exports: any;
}

declare module '@typescript-eslint/eslint-plugin/dist/util/astUtils' {
  declare module.exports: any;
}

declare module '@typescript-eslint/eslint-plugin/dist/util/createRule' {
  declare module.exports: any;
}

declare module '@typescript-eslint/eslint-plugin/dist/util/getParserServices' {
  declare module.exports: any;
}

declare module '@typescript-eslint/eslint-plugin/dist/util' {
  declare module.exports: any;
}

declare module '@typescript-eslint/eslint-plugin/dist/util/misc' {
  declare module.exports: any;
}

declare module '@typescript-eslint/eslint-plugin/dist/util/types' {
  declare module.exports: any;
}

// Filename aliases
declare module '@typescript-eslint/eslint-plugin/dist/configs/eslint-recommended.js' {
  declare module.exports: $Exports<'@typescript-eslint/eslint-plugin/dist/configs/eslint-recommended'>;
}
declare module '@typescript-eslint/eslint-plugin/dist/index' {
  declare module.exports: $Exports<'@typescript-eslint/eslint-plugin/dist'>;
}
declare module '@typescript-eslint/eslint-plugin/dist/index.js' {
  declare module.exports: $Exports<'@typescript-eslint/eslint-plugin/dist'>;
}
declare module '@typescript-eslint/eslint-plugin/dist/rules/adjacent-overload-signatures.js' {
  declare module.exports: $Exports<'@typescript-eslint/eslint-plugin/dist/rules/adjacent-overload-signatures'>;
}
declare module '@typescript-eslint/eslint-plugin/dist/rules/array-type.js' {
  declare module.exports: $Exports<'@typescript-eslint/eslint-plugin/dist/rules/array-type'>;
}
declare module '@typescript-eslint/eslint-plugin/dist/rules/await-thenable.js' {
  declare module.exports: $Exports<'@typescript-eslint/eslint-plugin/dist/rules/await-thenable'>;
}
declare module '@typescript-eslint/eslint-plugin/dist/rules/ban-ts-ignore.js' {
  declare module.exports: $Exports<'@typescript-eslint/eslint-plugin/dist/rules/ban-ts-ignore'>;
}
declare module '@typescript-eslint/eslint-plugin/dist/rules/ban-types.js' {
  declare module.exports: $Exports<'@typescript-eslint/eslint-plugin/dist/rules/ban-types'>;
}
declare module '@typescript-eslint/eslint-plugin/dist/rules/brace-style.js' {
  declare module.exports: $Exports<'@typescript-eslint/eslint-plugin/dist/rules/brace-style'>;
}
declare module '@typescript-eslint/eslint-plugin/dist/rules/camelcase.js' {
  declare module.exports: $Exports<'@typescript-eslint/eslint-plugin/dist/rules/camelcase'>;
}
declare module '@typescript-eslint/eslint-plugin/dist/rules/class-name-casing.js' {
  declare module.exports: $Exports<'@typescript-eslint/eslint-plugin/dist/rules/class-name-casing'>;
}
declare module '@typescript-eslint/eslint-plugin/dist/rules/consistent-type-assertions.js' {
  declare module.exports: $Exports<'@typescript-eslint/eslint-plugin/dist/rules/consistent-type-assertions'>;
}
declare module '@typescript-eslint/eslint-plugin/dist/rules/consistent-type-definitions.js' {
  declare module.exports: $Exports<'@typescript-eslint/eslint-plugin/dist/rules/consistent-type-definitions'>;
}
declare module '@typescript-eslint/eslint-plugin/dist/rules/explicit-function-return-type.js' {
  declare module.exports: $Exports<'@typescript-eslint/eslint-plugin/dist/rules/explicit-function-return-type'>;
}
declare module '@typescript-eslint/eslint-plugin/dist/rules/explicit-member-accessibility.js' {
  declare module.exports: $Exports<'@typescript-eslint/eslint-plugin/dist/rules/explicit-member-accessibility'>;
}
declare module '@typescript-eslint/eslint-plugin/dist/rules/func-call-spacing.js' {
  declare module.exports: $Exports<'@typescript-eslint/eslint-plugin/dist/rules/func-call-spacing'>;
}
declare module '@typescript-eslint/eslint-plugin/dist/rules/generic-type-naming.js' {
  declare module.exports: $Exports<'@typescript-eslint/eslint-plugin/dist/rules/generic-type-naming'>;
}
declare module '@typescript-eslint/eslint-plugin/dist/rules/indent-new-do-not-use/BinarySearchTree.js' {
  declare module.exports: $Exports<'@typescript-eslint/eslint-plugin/dist/rules/indent-new-do-not-use/BinarySearchTree'>;
}
declare module '@typescript-eslint/eslint-plugin/dist/rules/indent-new-do-not-use/index' {
  declare module.exports: $Exports<'@typescript-eslint/eslint-plugin/dist/rules/indent-new-do-not-use'>;
}
declare module '@typescript-eslint/eslint-plugin/dist/rules/indent-new-do-not-use/index.js' {
  declare module.exports: $Exports<'@typescript-eslint/eslint-plugin/dist/rules/indent-new-do-not-use'>;
}
declare module '@typescript-eslint/eslint-plugin/dist/rules/indent-new-do-not-use/OffsetStorage.js' {
  declare module.exports: $Exports<'@typescript-eslint/eslint-plugin/dist/rules/indent-new-do-not-use/OffsetStorage'>;
}
declare module '@typescript-eslint/eslint-plugin/dist/rules/indent-new-do-not-use/TokenInfo.js' {
  declare module.exports: $Exports<'@typescript-eslint/eslint-plugin/dist/rules/indent-new-do-not-use/TokenInfo'>;
}
declare module '@typescript-eslint/eslint-plugin/dist/rules/indent.js' {
  declare module.exports: $Exports<'@typescript-eslint/eslint-plugin/dist/rules/indent'>;
}
declare module '@typescript-eslint/eslint-plugin/dist/rules/index' {
  declare module.exports: $Exports<'@typescript-eslint/eslint-plugin/dist/rules'>;
}
declare module '@typescript-eslint/eslint-plugin/dist/rules/index.js' {
  declare module.exports: $Exports<'@typescript-eslint/eslint-plugin/dist/rules'>;
}
declare module '@typescript-eslint/eslint-plugin/dist/rules/interface-name-prefix.js' {
  declare module.exports: $Exports<'@typescript-eslint/eslint-plugin/dist/rules/interface-name-prefix'>;
}
declare module '@typescript-eslint/eslint-plugin/dist/rules/member-delimiter-style.js' {
  declare module.exports: $Exports<'@typescript-eslint/eslint-plugin/dist/rules/member-delimiter-style'>;
}
declare module '@typescript-eslint/eslint-plugin/dist/rules/member-naming.js' {
  declare module.exports: $Exports<'@typescript-eslint/eslint-plugin/dist/rules/member-naming'>;
}
declare module '@typescript-eslint/eslint-plugin/dist/rules/member-ordering.js' {
  declare module.exports: $Exports<'@typescript-eslint/eslint-plugin/dist/rules/member-ordering'>;
}
declare module '@typescript-eslint/eslint-plugin/dist/rules/no-array-constructor.js' {
  declare module.exports: $Exports<'@typescript-eslint/eslint-plugin/dist/rules/no-array-constructor'>;
}
declare module '@typescript-eslint/eslint-plugin/dist/rules/no-dynamic-delete.js' {
  declare module.exports: $Exports<'@typescript-eslint/eslint-plugin/dist/rules/no-dynamic-delete'>;
}
declare module '@typescript-eslint/eslint-plugin/dist/rules/no-empty-function.js' {
  declare module.exports: $Exports<'@typescript-eslint/eslint-plugin/dist/rules/no-empty-function'>;
}
declare module '@typescript-eslint/eslint-plugin/dist/rules/no-empty-interface.js' {
  declare module.exports: $Exports<'@typescript-eslint/eslint-plugin/dist/rules/no-empty-interface'>;
}
declare module '@typescript-eslint/eslint-plugin/dist/rules/no-explicit-any.js' {
  declare module.exports: $Exports<'@typescript-eslint/eslint-plugin/dist/rules/no-explicit-any'>;
}
declare module '@typescript-eslint/eslint-plugin/dist/rules/no-extra-non-null-assertion.js' {
  declare module.exports: $Exports<'@typescript-eslint/eslint-plugin/dist/rules/no-extra-non-null-assertion'>;
}
declare module '@typescript-eslint/eslint-plugin/dist/rules/no-extra-parens.js' {
  declare module.exports: $Exports<'@typescript-eslint/eslint-plugin/dist/rules/no-extra-parens'>;
}
declare module '@typescript-eslint/eslint-plugin/dist/rules/no-extraneous-class.js' {
  declare module.exports: $Exports<'@typescript-eslint/eslint-plugin/dist/rules/no-extraneous-class'>;
}
declare module '@typescript-eslint/eslint-plugin/dist/rules/no-floating-promises.js' {
  declare module.exports: $Exports<'@typescript-eslint/eslint-plugin/dist/rules/no-floating-promises'>;
}
declare module '@typescript-eslint/eslint-plugin/dist/rules/no-for-in-array.js' {
  declare module.exports: $Exports<'@typescript-eslint/eslint-plugin/dist/rules/no-for-in-array'>;
}
declare module '@typescript-eslint/eslint-plugin/dist/rules/no-inferrable-types.js' {
  declare module.exports: $Exports<'@typescript-eslint/eslint-plugin/dist/rules/no-inferrable-types'>;
}
declare module '@typescript-eslint/eslint-plugin/dist/rules/no-magic-numbers.js' {
  declare module.exports: $Exports<'@typescript-eslint/eslint-plugin/dist/rules/no-magic-numbers'>;
}
declare module '@typescript-eslint/eslint-plugin/dist/rules/no-misused-new.js' {
  declare module.exports: $Exports<'@typescript-eslint/eslint-plugin/dist/rules/no-misused-new'>;
}
declare module '@typescript-eslint/eslint-plugin/dist/rules/no-misused-promises.js' {
  declare module.exports: $Exports<'@typescript-eslint/eslint-plugin/dist/rules/no-misused-promises'>;
}
declare module '@typescript-eslint/eslint-plugin/dist/rules/no-namespace.js' {
  declare module.exports: $Exports<'@typescript-eslint/eslint-plugin/dist/rules/no-namespace'>;
}
declare module '@typescript-eslint/eslint-plugin/dist/rules/no-non-null-assertion.js' {
  declare module.exports: $Exports<'@typescript-eslint/eslint-plugin/dist/rules/no-non-null-assertion'>;
}
declare module '@typescript-eslint/eslint-plugin/dist/rules/no-parameter-properties.js' {
  declare module.exports: $Exports<'@typescript-eslint/eslint-plugin/dist/rules/no-parameter-properties'>;
}
declare module '@typescript-eslint/eslint-plugin/dist/rules/no-require-imports.js' {
  declare module.exports: $Exports<'@typescript-eslint/eslint-plugin/dist/rules/no-require-imports'>;
}
declare module '@typescript-eslint/eslint-plugin/dist/rules/no-this-alias.js' {
  declare module.exports: $Exports<'@typescript-eslint/eslint-plugin/dist/rules/no-this-alias'>;
}
declare module '@typescript-eslint/eslint-plugin/dist/rules/no-type-alias.js' {
  declare module.exports: $Exports<'@typescript-eslint/eslint-plugin/dist/rules/no-type-alias'>;
}
declare module '@typescript-eslint/eslint-plugin/dist/rules/no-unnecessary-condition.js' {
  declare module.exports: $Exports<'@typescript-eslint/eslint-plugin/dist/rules/no-unnecessary-condition'>;
}
declare module '@typescript-eslint/eslint-plugin/dist/rules/no-unnecessary-qualifier.js' {
  declare module.exports: $Exports<'@typescript-eslint/eslint-plugin/dist/rules/no-unnecessary-qualifier'>;
}
declare module '@typescript-eslint/eslint-plugin/dist/rules/no-unnecessary-type-arguments.js' {
  declare module.exports: $Exports<'@typescript-eslint/eslint-plugin/dist/rules/no-unnecessary-type-arguments'>;
}
declare module '@typescript-eslint/eslint-plugin/dist/rules/no-unnecessary-type-assertion.js' {
  declare module.exports: $Exports<'@typescript-eslint/eslint-plugin/dist/rules/no-unnecessary-type-assertion'>;
}
declare module '@typescript-eslint/eslint-plugin/dist/rules/no-untyped-public-signature.js' {
  declare module.exports: $Exports<'@typescript-eslint/eslint-plugin/dist/rules/no-untyped-public-signature'>;
}
declare module '@typescript-eslint/eslint-plugin/dist/rules/no-unused-expressions.js' {
  declare module.exports: $Exports<'@typescript-eslint/eslint-plugin/dist/rules/no-unused-expressions'>;
}
declare module '@typescript-eslint/eslint-plugin/dist/rules/no-unused-vars-experimental.js' {
  declare module.exports: $Exports<'@typescript-eslint/eslint-plugin/dist/rules/no-unused-vars-experimental'>;
}
declare module '@typescript-eslint/eslint-plugin/dist/rules/no-unused-vars.js' {
  declare module.exports: $Exports<'@typescript-eslint/eslint-plugin/dist/rules/no-unused-vars'>;
}
declare module '@typescript-eslint/eslint-plugin/dist/rules/no-use-before-define.js' {
  declare module.exports: $Exports<'@typescript-eslint/eslint-plugin/dist/rules/no-use-before-define'>;
}
declare module '@typescript-eslint/eslint-plugin/dist/rules/no-useless-constructor.js' {
  declare module.exports: $Exports<'@typescript-eslint/eslint-plugin/dist/rules/no-useless-constructor'>;
}
declare module '@typescript-eslint/eslint-plugin/dist/rules/no-var-requires.js' {
  declare module.exports: $Exports<'@typescript-eslint/eslint-plugin/dist/rules/no-var-requires'>;
}
declare module '@typescript-eslint/eslint-plugin/dist/rules/prefer-for-of.js' {
  declare module.exports: $Exports<'@typescript-eslint/eslint-plugin/dist/rules/prefer-for-of'>;
}
declare module '@typescript-eslint/eslint-plugin/dist/rules/prefer-function-type.js' {
  declare module.exports: $Exports<'@typescript-eslint/eslint-plugin/dist/rules/prefer-function-type'>;
}
declare module '@typescript-eslint/eslint-plugin/dist/rules/prefer-includes.js' {
  declare module.exports: $Exports<'@typescript-eslint/eslint-plugin/dist/rules/prefer-includes'>;
}
declare module '@typescript-eslint/eslint-plugin/dist/rules/prefer-namespace-keyword.js' {
  declare module.exports: $Exports<'@typescript-eslint/eslint-plugin/dist/rules/prefer-namespace-keyword'>;
}
declare module '@typescript-eslint/eslint-plugin/dist/rules/prefer-nullish-coalescing.js' {
  declare module.exports: $Exports<'@typescript-eslint/eslint-plugin/dist/rules/prefer-nullish-coalescing'>;
}
declare module '@typescript-eslint/eslint-plugin/dist/rules/prefer-optional-chain.js' {
  declare module.exports: $Exports<'@typescript-eslint/eslint-plugin/dist/rules/prefer-optional-chain'>;
}
declare module '@typescript-eslint/eslint-plugin/dist/rules/prefer-readonly.js' {
  declare module.exports: $Exports<'@typescript-eslint/eslint-plugin/dist/rules/prefer-readonly'>;
}
declare module '@typescript-eslint/eslint-plugin/dist/rules/prefer-regexp-exec.js' {
  declare module.exports: $Exports<'@typescript-eslint/eslint-plugin/dist/rules/prefer-regexp-exec'>;
}
declare module '@typescript-eslint/eslint-plugin/dist/rules/prefer-string-starts-ends-with.js' {
  declare module.exports: $Exports<'@typescript-eslint/eslint-plugin/dist/rules/prefer-string-starts-ends-with'>;
}
declare module '@typescript-eslint/eslint-plugin/dist/rules/promise-function-async.js' {
  declare module.exports: $Exports<'@typescript-eslint/eslint-plugin/dist/rules/promise-function-async'>;
}
declare module '@typescript-eslint/eslint-plugin/dist/rules/quotes.js' {
  declare module.exports: $Exports<'@typescript-eslint/eslint-plugin/dist/rules/quotes'>;
}
declare module '@typescript-eslint/eslint-plugin/dist/rules/require-array-sort-compare.js' {
  declare module.exports: $Exports<'@typescript-eslint/eslint-plugin/dist/rules/require-array-sort-compare'>;
}
declare module '@typescript-eslint/eslint-plugin/dist/rules/require-await.js' {
  declare module.exports: $Exports<'@typescript-eslint/eslint-plugin/dist/rules/require-await'>;
}
declare module '@typescript-eslint/eslint-plugin/dist/rules/restrict-plus-operands.js' {
  declare module.exports: $Exports<'@typescript-eslint/eslint-plugin/dist/rules/restrict-plus-operands'>;
}
declare module '@typescript-eslint/eslint-plugin/dist/rules/restrict-template-expressions.js' {
  declare module.exports: $Exports<'@typescript-eslint/eslint-plugin/dist/rules/restrict-template-expressions'>;
}
declare module '@typescript-eslint/eslint-plugin/dist/rules/return-await.js' {
  declare module.exports: $Exports<'@typescript-eslint/eslint-plugin/dist/rules/return-await'>;
}
declare module '@typescript-eslint/eslint-plugin/dist/rules/semi.js' {
  declare module.exports: $Exports<'@typescript-eslint/eslint-plugin/dist/rules/semi'>;
}
declare module '@typescript-eslint/eslint-plugin/dist/rules/space-before-function-paren.js' {
  declare module.exports: $Exports<'@typescript-eslint/eslint-plugin/dist/rules/space-before-function-paren'>;
}
declare module '@typescript-eslint/eslint-plugin/dist/rules/strict-boolean-expressions.js' {
  declare module.exports: $Exports<'@typescript-eslint/eslint-plugin/dist/rules/strict-boolean-expressions'>;
}
declare module '@typescript-eslint/eslint-plugin/dist/rules/triple-slash-reference.js' {
  declare module.exports: $Exports<'@typescript-eslint/eslint-plugin/dist/rules/triple-slash-reference'>;
}
declare module '@typescript-eslint/eslint-plugin/dist/rules/type-annotation-spacing.js' {
  declare module.exports: $Exports<'@typescript-eslint/eslint-plugin/dist/rules/type-annotation-spacing'>;
}
declare module '@typescript-eslint/eslint-plugin/dist/rules/typedef.js' {
  declare module.exports: $Exports<'@typescript-eslint/eslint-plugin/dist/rules/typedef'>;
}
declare module '@typescript-eslint/eslint-plugin/dist/rules/unbound-method.js' {
  declare module.exports: $Exports<'@typescript-eslint/eslint-plugin/dist/rules/unbound-method'>;
}
declare module '@typescript-eslint/eslint-plugin/dist/rules/unified-signatures.js' {
  declare module.exports: $Exports<'@typescript-eslint/eslint-plugin/dist/rules/unified-signatures'>;
}
declare module '@typescript-eslint/eslint-plugin/dist/util/astUtils.js' {
  declare module.exports: $Exports<'@typescript-eslint/eslint-plugin/dist/util/astUtils'>;
}
declare module '@typescript-eslint/eslint-plugin/dist/util/createRule.js' {
  declare module.exports: $Exports<'@typescript-eslint/eslint-plugin/dist/util/createRule'>;
}
declare module '@typescript-eslint/eslint-plugin/dist/util/getParserServices.js' {
  declare module.exports: $Exports<'@typescript-eslint/eslint-plugin/dist/util/getParserServices'>;
}
declare module '@typescript-eslint/eslint-plugin/dist/util/index' {
  declare module.exports: $Exports<'@typescript-eslint/eslint-plugin/dist/util'>;
}
declare module '@typescript-eslint/eslint-plugin/dist/util/index.js' {
  declare module.exports: $Exports<'@typescript-eslint/eslint-plugin/dist/util'>;
}
declare module '@typescript-eslint/eslint-plugin/dist/util/misc.js' {
  declare module.exports: $Exports<'@typescript-eslint/eslint-plugin/dist/util/misc'>;
}
declare module '@typescript-eslint/eslint-plugin/dist/util/types.js' {
  declare module.exports: $Exports<'@typescript-eslint/eslint-plugin/dist/util/types'>;
}
